ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=0, vjust=0, size = 1)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=0, vjust=0, size = 8)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=0, vjust=0, size = 3)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=0, vjust=1, size = 3)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=0, vjust=-1, size = 3)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=-3, vjust=-1, size = 3)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=3, vjust=-1, size = 3)
ggplot(data = gr, aes(PESPUNTADOR,PRELIMINAR, colour = factor(CLUSTER))) +
geom_point(size = 2) +
geom_point(data = centers,
aes(PESPUNTADOR,PRELIMINAR), pch= 3, col = "red", size = 4) +
xlab("TIEMPO DE PESPUNTADORES")  +
ylab("TIEMPO DE PRELIMINARES") +
theme(legend.position="none") +
geom_text(aes(label=paste("Estilo",ESTILO)),hjust=1, vjust=-1, size = 3)
head(tiempos.col)
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
gr <- cbind(gr, CLUSTER = k$cluster)
centers <- gr[2:4]%>%group_by(CLUSTER)%>%summarise("PESPUNTADOR" = mean(PESPUNTADOR), "PRELIMINAR" = mean(PRELIMINAR) )
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
#familias a crear en el análisis
familias <- 6
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
gr <- cbind(gr, "CLUSTER" = k$cluster)
centers <- gr[2:4]%>%group_by(CLUSTER)%>%summarise("PESPUNTADOR" = mean(PESPUNTADOR), "PRELIMINAR" = mean(PRELIMINAR) )
gr
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(gr, "CLUSTER" = k$cluster)
kable(agrupacion.final[1,dim(agrupacion.final)[2]], format = "markdown")
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(gr, "CLUSTER" = k$cluster)
kable(agrupacion.final[,c(1,dim(agrupacion.final)[2])], format = "markdown")
head(gr)
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(tiempos.col, "CLUSTER" = k$cluster)
kable(agrupacion.final[,c(1,dim(agrupacion.final)[2])], format = "markdown")
head(agrupacion.final)
agrupacion.final[,c(1,dim(agrupacion.final)[2])]
head(agrupacion.final)
qplot(agrupacion.final)
qplot(agrupacion.final)+ geom_point()
pairs(agrupacion.final)
tiempos.ren.cluster <- merge(tiempos.ren, reporte, by = "ESTILO")
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(tiempos.col, "LINEA.PRODUCCION" = k$cluster)
reporte <- agrupacion.final%>%select(LINEA.PRODUCCION, ESTILO)%>%
arrange(LINEA.PRODUCCION)
#agregar cluster a tabla por renglon
tiempos.ren.cluster <- merge(tiempos.ren, reporte, by = "ESTILO")
head(tiempos.ren.cluster)
tail(tiempos.ren.cluster)
ggplot(data = tiempos.ren.cluster, aes(ESTILO, SEGUNDOS.POR.PAR, colour = LINEA.PRODUCCION)) + geom_point()+ facet_wrap(~PUESTO)
ggplot(data = tiempos.ren.cluster, aes(ESTILO, SEGUNDOS.POR.PAR, colour = LINEA.PRODUCCION)) + geom_point()+ facet_wrap(~PUESTO, scales = "free")
ggplot(data = tiempos.ren.cluster, aes(ESTILO, SEGUNDOS.POR.PAR, colour = factor(LINEA.PRODUCCION))) + geom_point()+ facet_wrap(~PUESTO, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(ESTILO, SEGUNDOS.POR.PAR, colour = factor(LINEA.PRODUCCION))) + geom_point()+ facet_wrap(~PUESTO, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(FACTOR(ESTILO), SEGUNDOS.POR.PAR, colour = factor(LINEA.PRODUCCION))) + geom_point()+ facet_wrap(~PUESTO, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(factor(ESTILO), SEGUNDOS.POR.PAR, colour = factor(LINEA.PRODUCCION))) + geom_point()+ facet_wrap(~PUESTO, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(PUESTO, SEGUNDOS.POR.PAR, colour = factor(ESTILO))) + geom_point()+ facet_wrap(~LINEA.PRODUCCION, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(PUESTO, SEGUNDOS.POR.PAR, colour = factor(ESTILO))) + geom_boxplot()+ facet_wrap(~LINEA.PRODUCCION, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(PUESTO, SEGUNDOS.POR.PAR)) + geom_boxplot()+ facet_wrap(~LINEA.PRODUCCION, scales = "free")
ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(PUESTO, SEGUNDOS.POR.PAR)) + geom_boxplot(col = "wheat")+ facet_wrap(~LINEA.PRODUCCION, scales = "free")
g <- ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(PUESTO, SEGUNDOS.POR.PAR)) + geom_boxplot(col = "wheat")+ facet_wrap(~LINEA.PRODUCCION, scales = "free")
ggplotly(g)
g <- ggplot(data = tiempos.ren.cluster%>%arrange(LINEA.PRODUCCION), aes(PUESTO, SEGUNDOS.POR.PAR)) + geom_boxplot()+ facet_wrap(~LINEA.PRODUCCION, scales = "free")
ggplotly(g)
head(tiempos.ren.cluster)
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCTIONPUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCTION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
kable(prom.sd.clust, format = "markdown")
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
tiempos.raw
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpi
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos.col)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
#familias a crear en el análisis
familias <- 6
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(tiempos.col, "LINEA.PRODUCCION" = k$cluster)
reporte <- agrupacion.final%>%select(LINEA.PRODUCCION, ESTILO)%>%
arrange(LINEA.PRODUCCION)
#agregar cluster a tabla por renglon
tiempos.ren.cluster <- merge(tiempos.ren, reporte, by = "ESTILO")
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
prom.sd.clust
kable(reporte, format = "markdown")
reporte[reporte$LINEA.PRODUCCION==6]
reporte[reporte$LINEA.PRODUCCION==6,]
tiempos.raw[tiempos.raw$ESTILO %in% c(121,122,123),]
tiempos.raw[tiempos.raw$ESTILO %in% c(120,121,122,123),]
View(tiempos.col)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos)
tiempos[tiempos$ESTILO==121,]
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
tiempos[tiempos$ESTILO==121,]
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(test)
test[test$estilo.fake==121,]
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos.temp)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(test)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
estilos
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos.temp)
estilos
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
dim(estilos)[2]
dim(esti)
dim(estilos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
dim(estilos)
row(estilos)
str(estilos)
dim(estilos)
sum(estilos)
row(estilos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(estilos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpi
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos.temp)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(datos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
#familias a crear en el análisis
familias <- 6
set.seed(88)
gr <- head(tiempos.col[c(1,5:6)])
k <- kmeans(scale(gr[2:3]), centers = 3 ,nstart = 10, iter.max = 100)
head(tiempos.col)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
head(tiempos)
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
set.seed(88)
gr <- head(tiempos.col[c(1,5:6)])
k <- kmeans(scale(gr[2:3]), centers = 3 ,nstart = 10, iter.max = 100)
gr <- cbind(gr, CLUSTER = k$cluster)
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
set.seed(8)
distancias <- dist(tiempos.col, method = "euclidian")
arbol <- hclust(distancias)
nrd = 600
ngr = 400
nbl = 1500
plot(arbol, axes = T, main = "Cluster de agrupamiento",
xlab = "Modelos", ylab = "Indice de desviación")
abline(h = nrd, col="red") +
abline(h = ngr, col = "green") +
abline(h = nbl, col = "blue")
rd <- max(unique(cutree(arbol, h= nrd)))
gr <- max(unique(cutree(arbol, h= ngr)))
bl <- max(unique(cutree(arbol, h= nbl)))
#familias a crear en el análisis
familias <- rd
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(tiempos.col, "LINEA.PRODUCCION" = k$cluster)
reporte <- agrupacion.final%>%select(LINEA.PRODUCCION, ESTILO)%>%
arrange(LINEA.PRODUCCION)
#agregar cluster a tabla por renglon
tiempos.ren.cluster <- merge(tiempos.ren, reporte, by = "ESTILO")
prom.sd <- data.frame(tiempos.ren%>%group_by(PUESTO) %>%summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
kable(prom.sd, format = "markdown")
head(tiempos.ren.cluster)
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
prom.sd.clust
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia("FAMILIA")
source('~/DataScience/Proyectos/familiasdeproductos/lineas de produccion.R', encoding = 'UTF-8')
limpia()
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
head(tiempos.col)
data.frame("ESTILO" = c(1:6), "PESPUNTADOR" = c(489,232,308,262,650,133), "PRELIMINAR" = c(1401,1214,987,1091,2273,687))
limpia("FAMILIA")
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cluster))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(plotly))
#en renglones
tiempos.raw <- read.csv("tiempos.final.csv")
#revisar nas (para cada puesto debe existir dato, si no existe, debe ser cero)
#convertir a tabla, convertirá los vacios en nas, se deben convertir a cero
tiempos.col <- spread(data = tiempos.raw, key = PUESTO, value = SEGUNDOS.POR.PAR)
tiempos.col[is.na(tiempos.col)]<- 0
#convertir en renglones para analisis, pero no para k-means
tiempos.ren  <- gather(tiempos.col, PUESTO, SEGUNDOS.POR.PAR, -ESTILO)
set.seed(8)
distancias <- dist(tiempos.col, method = "euclidian")
arbol <- hclust(distancias)
nrd = 500
ngr = 300
nbl = 1500
plot(arbol, axes = T, main = "Cluster de agrupamiento",
xlab = "Modelos", ylab = "Indice de desviación")
abline(h = nrd, col="red") +
abline(h = ngr, col = "green") +
abline(h = nbl, col = "blue")
rd <- max(unique(cutree(arbol, h= nrd)))
gr <- max(unique(cutree(arbol, h= ngr)))
bl <- max(unique(cutree(arbol, h= nbl)))
#familias a crear en el análisis
familias <- rd
set.seed(88)
gr <- tiempos.col[c(2:dim(tiempos.col)[2])]
k <- kmeans(scale(gr), centers = familias ,nstart = 10, iter.max = 100)
agrupacion.final <- cbind(tiempos.col, "LINEA.PRODUCCION" = k$cluster)
reporte <- agrupacion.final%>%select(LINEA.PRODUCCION, ESTILO)%>%
arrange(LINEA.PRODUCCION)
#agregar cluster a tabla por renglon
tiempos.ren.cluster <- merge(tiempos.ren, reporte, by = "ESTILO")
prom.sd <- data.frame(tiempos.ren%>%
group_by(PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
kable(prom.sd, format = "markdown")
prom.sd.clust <- data.frame(tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2)))
kable(prom.sd, format = "markdown")
head(tiempos.ren.cluster)
head(tiempos.ren)
prom.sd.clust <- tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION,PUESTO) %>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2))
kable(prom.sd, format = "markdown")
head(tiempos.ren.cluster)
tiempos.ren.cluster%>%group_by(LINEA.PRODUCCION, PUESTO)%>%summarise(mean(SEGUNDOS.POR.PAR))
prom.sd.clust <- tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION, PUESTO)%>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)), "Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)) , "Porcentaje" = round(Desviacion/Promedio*100,2))
kable(prom.sd.clust, format = "markdown")
prom.sd.clust <- tiempos.ren.cluster%>%
group_by(LINEA.PRODUCCION, PUESTO)%>%
summarise("Promedio" = ceiling(mean(SEGUNDOS.POR.PAR)),
"Desviacion" = ceiling(sd(SEGUNDOS.POR.PAR)),
"Porcentaje" = round(Desviacion/Promedio*100,2))%>%
group_by(PUESTO)%>%
summarise("Promedio" = ceiling(mean(Promedio)),
"Desviacion" = ceiling(sd(Desviacion)) ,
"Porcentaje" = round(Desviacion/Promedio*100,2))
kable(prom.sd.clust, format = "markdown")
resultado <- cbind("PORCENTAJE.INICIAL" = prom.sd$Porcentaje,
"PORCENTAJE.FINAL" = prom.sd.clust$Porcentaje)%>%
mutate("MEJORA" = PORCENTAJE.FINAL/PORCENTAJE.FINAL)
resultado <- data.frame(cbind("PORCENTAJE.INICIAL" = prom.sd$Porcentaje,
"PORCENTAJE.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("MEJORA" = PORCENTAJE.FINAL/PORCENTAJE.FINAL)
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("MEJORA" = PCT.FINAL/PCT.INICIAL)
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("MEJORA" = round(1-PCT.FINAL/PCT.INICIAL),2)
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("MEJORA" = round(1-PCT.FINAL/PCT.INICIAL,2))
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("DISMINUNCION DE DESVIACION" = paste0((1-PCT.FINAL/PCT.INICIAL)*100,"%")
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("DISMINUNCION DE DESVIACION" = paste0((1-PCT.FINAL/PCT.INICIAL)*100,"%"))
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("DISMINUNCION DE DESVIACION" = paste0(round((1-PCT.FINAL/PCT.INICIAL)*100,2),"%"))
kable(resultado, format = "markdown")
resultado <- data.frame(cbind("PCT.INICIAL" = prom.sd$Porcentaje,
"PCT.FINAL" = prom.sd.clust$Porcentaje))%>%
mutate("DISMINUNCION DE DESVIACION" = paste0(round((1-PCT.FINAL/PCT.INICIAL)*100,2),"%"))
kable(resultado, format = "markdown", align = "c")
head(tiempos.ren.cluster)
ggplot(data = tiempos.ren.cluster, aes(PUESTO, SEGUNDOS.POR.PAR))+ geom_boxplot() + facet_wrap(~LINEA.PRODUCCION)
ggplot(data = tiempos.ren.cluster, aes(PUESTO, SEGUNDOS.POR.PAR))+ geom_boxplot() + facet_wrap(~LINEA.PRODUCCION, scales = "free")
g <- ggplot(data = tiempos.ren.cluster, aes(PUESTO, SEGUNDOS.POR.PAR))+ geom_boxplot() + facet_wrap(~LINEA.PRODUCCION, scales = "free",ncol = 2)
